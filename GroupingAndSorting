Grouping And Sorting 

Explain the importance of grouping and sorting data stored in a database
Group and sort data with the GROUP BY() and ORDER BY() keywords
Craft advanced queries using aggregator functions along with sorting keywords and other conditional clauses

SQL isn't picky about how it returns data to you based on your queries 
It simply returns relevant table rows in the order in which they exist in the table
This is often insufficient for the purposes of data analysis and organization 

We can tell our SQL queries and aggregate functions to group and sort our data using several clauses:

ORDER BY()
LIMIT
GROUP BY()
HAVING and WHERE
ASC/DESC

Setting up the DB 
Some cats are very famous and accordingly very wealthy 
Our Pets DB will have a cats table with wach cat having a name, age, breed and net worth 
Our db also have an owner table and cats_owners join the table 
so that a cat can have many owners and an owner can have many cats 

Create the DB 
In the terminal create the database and start sqlite3 with the following 
sqlite3 cats_database.db 

Create the tables 
Create the table by entering the commands below in the sqlite prompt 
CREATE TABLE cats (
id INTEGER PRIMARY KEY,
name TEXT,
age INTEGER,
breed TEXT,
net_worth INTEGER
); 

owners Table:

CREATE TABLE owners (id INTEGER PRIMARY KEY, name TEXT); 

cats_owners Table:

CREATE TABLE cats_owners (
cat_id INTEGER,
owner_id INTEGER
); 

Inserting the values 
enter the following 

cats:
INSERT INTO cats (id, name, age, breed, net_worth) VALUES (1, "Maru", 3, "Scottish Fold", 1000000);
INSERT INTO cats (id, name, age, breed, net_worth) VALUES (2, "Hana", 1, "Tabby", 21800);
INSERT INTO cats (id, name, age, breed, net_worth) VALUES (3, "Grumpy Cat", 4, "Persian", 181600);
INSERT INTO cats (id, name, age, breed, net_worth) VALUES (4, "Lil\' Bub", 2, "Tortoiseshell", 2000000); 

owners:

INSERT INTO owners (name) VALUES ("mugumogu");
INSERT INTO owners (name) VALUES ("Sophie");
INSERT INTO owners (name) VALUES ("Penny"); 

cats_owners:

INSERT INTO cats_owners (cat_id, owner_id) VALUES (2, 2);
INSERT INTO cats_owners (cat_id, owner_id) VALUES (4, 3);
INSERT INTO cats_owners (cat_id, owner_id) VALUES (1, 2); 

--------------------------------------------------------------------------------------------------
Code Along I: ORDER BY()
Syntax 
The general syntax for selecting values and sorting them is 

    SELECT column_name, column_name
    FROM table_name
    ORDER BY column_name ASC, column_name DESC; 

ORDER BY() will automatically sort and return values in ascending order so the use of ASC keyword is optional 
If we want to stort in descending order instead, we need to use the DESC keyword 

Exercise 
Investors need your help deciding which cat is the most lucrative and popular cat 
They want a list of famous and wealthy cats 

We can do that by running a basic SELECT statement at the prompt 

SELECT * FROM cats WHERE net_worth > 0; 

This will return:

id           name             age         breed          net_worth
-----------  ---------------  ----------  -------------  ----------
1            Maru             3           Scottish Fold  1000000
2            Hana             1           Tabby          21800
3            Grumpy Cat       4           Persian        181600
4            Lil\' Bub        2           Tortoiseshell  2000000 

Now they want you to return the list of them with the cats sorted by net worth from greatest to least 

SELECT * FROM cats ORDER BY(net_worth) DESC; 

This will return:

id           name             age         breed          net_worth
-----------  ---------------  ----------  -------------  ----------
4            Lil\' Bub        2           Tortoiseshell  2000000
1            Maru             3           Scottish Fold  1000000
3            Grumpy Cat       4           Persian        181600
2            Hana             1           Tabby          21800 
-------------------------------------------------------------------------------------------------------

Code Along II: The LIMIT Keyword

Now they want you to return the wealthiest cat 
Using the LIMIT keyword with the query about 

SELECT * FROM cats ORDER BY(net_worth) DESC LIMIT 1; 

Which will return:

name             age         breed          net_worth
---------------  ----------  -------------  ----------
Lil\' Bub        2           Tortoiseshell  2000000 

The LIMIT keyword specifies how many of the records, resulting from the query you'd like to actually return 
In this case, b/c we've sorted the records in descending order by net_worth and set the LIMIT to 1 
the wealthiest cat is returned 

---------------------------------------------------------------------------------------------------------

Code Along III: GROUP BY()

GROUP BY() is similart to ORDER BY() 
The main difference is the ORDER BY() sorts sets of data returned by basic queries 
while GROUP BY() sorts sets of data returned by aggregate functions 

Syntax
    SELECT column_name, aggregate_function(column_name)
    FROM table_name
    WHERE column_name operator value
    GROUP BY column_name; 

Exercise 
Caluclate the sum of the net worth of all of the cats, grouped by owner name:

SELECT owners.name, SUM(cats.net_worth)
FROM owners
INNER JOIN cats_owners
ON owners.id = cats_owners.owner_id
JOIN cats ON cats_owners.cat_id = cats.id
GROUP BY owners.name; 

This should return:

owners.name      SUM(cats.net_worth)
---------------  -------------------
Penny            2000000
Sophie           1021800 

Above we've implemented two joins. 
FIrst we're joining owners and cats_owners on owner.id = cats_owners.owner_id 

This first joined table would look like 
owners.id  owners.name      cat_owners.cat_id  cat_owners.owner_id
---------  -----------      -----------------  -------------------
2          Sophie           2                  2
3          Penny            4                  3
2          Sophie           1                  2 

Withi this table, we've implemented the SECOND join with cats 
on cats_owners.cat_id = cats.id 

In our example query, we need to use SUM(cats.net_worth) aggregator in conjunction with 
GROUP BY to get the information we want 
Without the GROUP BY, only the first owner in the table would be returned, along with the 
sum of the net worth of all the cats:
owners.name      SUM(cats.net_worth)
---------------  -------------------
Sophie           3021800 


When we use the SUM and GROUP BY together, SUM looks at all of the values in the net_worth 
column of the cats table and takes the sum of those values 
but only after those cats have been grouped by owner 

owners.name      SUM(cats.net_worth)
---------------  -------------------
Penny            2000000
Sophie           1021800 

In our original data, Penny is the owner of Lil' Bub (2000000) while Sophie is the owner of Maru and Hana (1000000 + 21800).

---------------------------------------------------------------------------------------------------------

Code Along IV: HAVING vs WHERE clause

Suppose we have a table called employee_bonus as shown below 
Not that the table has multiple entries for employees Abigail and Matthew 

employee_bonus:

Employee	Bonus
Matthew	1000
Abigail	2000
Matthew	500
Tom	700
Abigail	1250

To Caluclate the total bonus that each employee received, we would 
write a SQL statement like 
    ELECT employee, SUM(bonus) FROM employee_bonus GROUP BY employee; 

This should return:

employee         SUM(bonus)
---------------  -------------------
Abigail          3250
Matthew          1500
Tom              700 


Suppose we want to find the employee who received more than 1,000$ in bonuses 
We need to use the HAVING clause 
The HAVING clause was added to SQL so that we could compare aggregates in the same way that the 
WHERE clause can be used for comparing non-aggregates 

The SQL will look like 

SELECT employee, SUM(bonus) FROM employee_bonus
GROUP BY employee HAVING SUM(bonus) > 1000; 

difference between HAVING and WHERE clause 
WHERE clause connot be used with aggregates 
while the HAVING clause can 

Having filters out groups of rows created by GROUP BY 
WHERE filters out individual rows 

Note that there is nothing to stop you from using both of them in the same query 

It is important to remember that order matters here 
WHERE must come before GROUP BY 
and HAVING must come after 
changing the order will produce a syntax error 





