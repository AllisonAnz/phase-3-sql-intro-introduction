SQL Insert, Select, Update and Delete

Use the INSERT INTO command to insert data (i.e. rows) into a database table
Use SELECT statements to select data from a database table
Use the WHERE clause to select data from specific table rows
Use comparison operators, like < or >, to select specific data
Use UPDATE statements to update data within a database table
Use DELETE statements to delete data from a database table

In This lesson we cover different ways to manipulate and select data from SQL databse tables 

Setting up our Database
In this code a long we'll create a cats table in pet_database.db 
Using the same files that we created before 

Code Along I: INSERT INTO 
in the sqlite prompt type 
INSERT INTO cats (name, age, breed) VALUES ('Maru', 3, 'Scottish Fold'); 

We used INSERT INTO command, followed by the name of the table to which we want to add data 
Then in () we put the column names that we will be filling with data 
This is followed by the VALUES keyword which is accompanied by the () enclosed with a list of the values 
that correspond to each column 

Now lets add them via the file 
01_insert_cats_into_cats_table.sql

INSERT INTO cats (name, age, breed) VALUES ("Lil' Bub", 5, 'American Shorthair');
INSERT INTO cats (name, age, breed) VALUES ('Hannah', 1, 'Tabby');

sqlite3 pets_database.db < 01_insert_cats_into_cats_table.sql 

Now we'll learn how to SELECT data from the table, which will help us confirm  
that we inserted the above data correctly 

---------------------------------------------------------------------------------
Selecting Data 

Now that we've inserted some data into our cats table, we likely want to read that data
This is where the Select statement comes in 
We use it to retrieve database data or rows 

Code Along II: Select From 
A basic SELECT statement works like 

SELECT [names of columns we are going to select] FROM [table we are selecting from]; 

We specific the names of the columns we want to SELECT and then tell SQL the table 
we want to select them FROM 

We want to select all the rows in our table and we want to return the data stored in 
any and all columns in those rows 
To do this we could pass the name of each coumn explicitly 

SELECT id, name, age, breed FROM cats; 

Which should give us back 

1|Maru|3|Scottish Fold
2|Lil' Bub|5|American Shorthair
3|Hannah|1|Tabby 

A faster way to get data from every column in our table is to use a special selector 
known commonly as the 'wildcard' selector * 
* selector means "Give me all the data from all the columns for all of the cats 
Using the wildcard we can SELECT all the data from all of the columns in the cats table 

SELECT * FROM cats; 

Selecting by Column Names 
# To select just certain columns from a table 
use the following 

SELECT name FROM cats; 

This should return 
Maru
Lil' Bub
Hannah 

We can even select more than one column name at a time 
SELECT name, age FROM cats; 

Tip: If you have duplicate data (for example two cats with the same name)
and you only want to select unique values 
use the DISTINCT keyword 

SELECT DISTINCT name FROM cats; 

Selecing Based on Conditions: There WHERE clasue 
What happens when we want to retrieve a specific table row 
Like the row that belongs to MARU 
or to retrieve all the baby cats who are younger than two years old 

We can use the WHERE keyword to select data based on specific conditions 
Here's an example of a boilerplate SELECT statement using a WHERE clause 

SELECT * FROM [table name] WHERE [column name] = [some value]; 

That statement should return the following 
1|Maru|3|Scottish Fold 

We can also use comparison operator like < or > to select specifc data 
Use the following statement to select the young cats 

SELECT * FROM cats WHERE age < 2; 

Advanced: the statments we're learning here will eventually be used to integrate 
the application you'll build with a db. 

---------------------------------------------------------------------------------
Updating Data 

updating, or changing, data in our table rows 
Using the UPDATE keyword 

Code Along III: UPDATE 

A boilerplate UPDATE statement looks like this:

UPDATE [table name] SET [column name] = [new value] WHERE [column name] = [value];

The UPDATE statement uses a WHERE clause to grab the row you want to update 
It identifies the table name you are looking in and resets the data in a particular 
column to a new value 

Lets update one of our cats 
Change Hannah to Hana 

UPDATE cats SET name = "Hana" WHERE name = "Hannah"; 

---------------------------------------------------------------------------------------
Deleting Data 
to delete table rows, we used the DELETE keyword 

Code Along IV: DELETE 

A boilerplate DELETE statement looks like this:

DELETE FROM [table name] WHERE [column name] = [value]; 

Delete Hana From our cats table 
DELETE FROM cats WHERE id = 3; 

Notice that this time we selected the row to delte using the Primary Key column 
Every table row has a Primary Key column that is unique  
Hana was the third row in the database thus had an id of 3 
