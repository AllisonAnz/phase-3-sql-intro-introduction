Learning Goals
Describe how relational databases store data in tables composed of columns and rows
Use lower case and snake_case conventions for column names
Use the CREATE TABLE keywords to create a new table with columns, including the id column
Use the .help command to get a complete list of SQL commands
Use the .tables command to list all the tables in a database
Use the .schema command to look at the structure of a database
Use the ALTER TABLE keywords to add columns to a table
Use the DROP TABLE keywords to delete a table

We'll cover how to create and delete db tables in SqLite 
and how to add columns to an existing table 

Database Structure 
Relational Databases like SQLite store data in a structure we refer to as a table 
A lot like a spreadsheet 

we define specific columns in our table 
then we store any number of what we refer to as 'records' as rows in our db 

A record is just info referring to one specific entity 
Example 
name	age	    email
Bob	    29	    bob@flatironschool.com
Avi	    28	    avi@flatironschool.com
Adam	28	    adam@flatironschool.com

Each column has a name and each row contains corresponding info about a person 

Note on Column Names 
There are a few conventions we follow when naming columns 
First, use lowercase letters when referring to columns in our db 
Second, when we have multiple words in a column name link them together using snake_case (email_address)

Database Tables 
How to create alter and delete databases tables 

Create a Table 
A new table is a blank slate 
We can then create a table inside our db using the following statement 
CREATE TABLE table_name; 

before we are able to store any actual data in a table 
we'll need to define the columns in the table as well as the specific type of data each column will store 

Code Along 1: Creating a Table 
In the terminal let's create our new database and start sqlite3 by running the following:
sqlite3 pet_database.db 

Now, at our sqlite prompt, create our table 
CREATE TABLE cats; 

You'll get the error 
Error: near ";": syntax error 

SQLite expects us to include at least some definition of the structure of this table 
When we create a db tables, we need to specify some column names 
along with the type of data we are planning to store in each column 

Try the table statement again 
CREATE TABLE cats (
  id INTEGER PRIMARY KEY,
  name TEXT,
  age INTEGER
); 

Break down 
1. Using the CREATE_TABLE command to create a new table called "cats"
2. include a list of columns names along with the type of data they will be storing 
    TEXT means we will be storing text 
    INTEGER storing number 
3. Every table we create, regardless of the other column names and data types, should be defined with an id 
    INTEGER PRIMARY KEY column, including the integer data type and primary key designation 
    Our SQLite db table must be indexed by a number 
    We want each row in our table to have a number, which we can call "id" just like in Excel 
    Numbering our table rows makes our data that much easier to access, update and organize

    SQLite comes with a data type designation called "Primary Key" 
    Primary keys are unique and auto increment, meaning they start at 1 and each new row 
    automatically gets assigned the next numeric value 

 .help lists commands 

 .tables check our our new table 
 type this into the command and you'll see our cats table listed  

 We can look at the structore ("schema") of our db (i.e. the tables and their columns + column data types)
 with the .schema command 
 sqlite> .schema
CREATE TABLE cats (
  id INTEGER PRIMARY KEY,
  name TEXT,
  age INTEGER
); 



Alter Table 
We decide we want to add or remove a column 
use the statement
ALTER TABLE 

---------------------------------------------------------------------------------------------------------------
Code Along II: Adding, Removing and Renaming Columns 

Say we want to add a new column breed to our cat table 
ALTER TABLE cats ADD COLUMN breed TEXT; 

Now we can check out our new schema 
sqlite> .schema
CREATE TABLE cats (
  id INTEGER PRIMARY KEY,
  name TEXT,
  age INTEGER,
  breed TEXT
); 

Notice ALTER statement isn't here, instead SQlite has updated our original CREATE statement 
The schema reflects the current structure of the db, which is reflected as the CREATE statement 
necesssary to create that structure 

Unfortunately, altering a column name and/or deleteing a column can be tricky in SQLite3 
There are workarounds, explore here 
https://www.sqlite.org/lang_altertable.html

For now, if you need to change a column name, it's best to simply delete the table and re-create it 

Drop Table 
How to delete a table from a db with DROP TABLE statement 
------------------------------------------------------------------------------------------------------------

Code Along III: Deleting a Table 
DROP TABLE cats; 

And that's it! You can exit out of the sqlite prompt with the .quit command.